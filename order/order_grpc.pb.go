// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ScheduleOrderPushClient is the client API for ScheduleOrderPush service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleOrderPushClient interface {
	SchedulePushNotification(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Result, error)
}

type scheduleOrderPushClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleOrderPushClient(cc grpc.ClientConnInterface) ScheduleOrderPushClient {
	return &scheduleOrderPushClient{cc}
}

func (c *scheduleOrderPushClient) SchedulePushNotification(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/orderPushScheduler.ScheduleOrderPush/schedulePushNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleOrderPushServer is the server API for ScheduleOrderPush service.
// All implementations must embed UnimplementedScheduleOrderPushServer
// for forward compatibility
type ScheduleOrderPushServer interface {
	SchedulePushNotification(context.Context, *Order) (*Result, error)
	mustEmbedUnimplementedScheduleOrderPushServer()
}

// UnimplementedScheduleOrderPushServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleOrderPushServer struct {
}

func (UnimplementedScheduleOrderPushServer) SchedulePushNotification(context.Context, *Order) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulePushNotification not implemented")
}
func (UnimplementedScheduleOrderPushServer) mustEmbedUnimplementedScheduleOrderPushServer() {}

// UnsafeScheduleOrderPushServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleOrderPushServer will
// result in compilation errors.
type UnsafeScheduleOrderPushServer interface {
	mustEmbedUnimplementedScheduleOrderPushServer()
}

func RegisterScheduleOrderPushServer(s grpc.ServiceRegistrar, srv ScheduleOrderPushServer) {
	s.RegisterService(&_ScheduleOrderPush_serviceDesc, srv)
}

func _ScheduleOrderPush_SchedulePushNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleOrderPushServer).SchedulePushNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderPushScheduler.ScheduleOrderPush/schedulePushNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleOrderPushServer).SchedulePushNotification(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScheduleOrderPush_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderPushScheduler.ScheduleOrderPush",
	HandlerType: (*ScheduleOrderPushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "schedulePushNotification",
			Handler:    _ScheduleOrderPush_SchedulePushNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
